{"ast":null,"code":"import _asyncToGenerator from \"/Users/arifshaikh/Documents/GitHub/ld-demo-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject, distinctUntilChanged, map, startWith } from 'rxjs';\nimport { environment } from '../environments/environment';\nimport { initialize } from 'launchdarkly-js-client-sdk';\nimport * as i0 from \"@angular/core\";\nexport let FeatureFlagsService = /*#__PURE__*/(() => {\n  class FeatureFlagsService {\n    constructor(zone) {\n      this.zone = zone;\n      this.flags$ = new BehaviorSubject({});\n    }\n    initialize(initialContext) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        if (_this.client) return;\n        const context = initialContext ?? {\n          kind: 'user',\n          key: 'demo-anon',\n          anonymous: true\n        };\n        _this.client = initialize(environment.launchDarklyClientId, context, {\n          bootstrap: environment.bootstrapFlags\n        });\n        try {\n          yield _this.client.waitForInitialization();\n        } catch (e) {\n          console.warn('[LD] init error; using bootstrap defaults', e);\n        }\n        _this.flags$.next(_this.client.allFlags());\n        _this.client.on('change', changes => {\n          const merged = {\n            ..._this.flags$.value\n          };\n          Object.keys(changes).forEach(k => merged[k] = changes[k].current);\n          _this.zone.run(() => _this.flags$.next(merged));\n        });\n      })();\n    }\n    getFlag$(key, fallback) {\n      const first = this.variation(key, fallback);\n      return this.flags$.pipe(map(() => this.variation(key, fallback)), startWith(first), distinctUntilChanged());\n    }\n    variation(key, fallback) {\n      try {\n        return this.client?.variation(key, fallback) ?? fallback;\n      } catch {\n        return fallback;\n      }\n    }\n    identify(context) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if (!_this2.client) throw new Error('LD not initialized');\n        yield _this2.client.identify(context);\n        _this2.zone.run(() => _this2.flags$.next(_this2.client.allFlags()));\n      })();\n    }\n    static {\n      this.ɵfac = function FeatureFlagsService_Factory(t) {\n        return new (t || FeatureFlagsService)(i0.ɵɵinject(i0.NgZone));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: FeatureFlagsService,\n        factory: FeatureFlagsService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return FeatureFlagsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}